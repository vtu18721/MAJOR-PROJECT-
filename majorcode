import glob
import keras as k
import numpy as np
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
import matplotlib.pyplot as plt
import tensorflow.keras.initializers

from keras.models import Sequential, load_model


df=pd.read_csv("kidney_disease.csv")
print(df.head(5))

columns_to_retain=['sg','al','sc','hemo','pcv','wc','rc','htn','classification']

#Drop the columns that are not in columns_to_retain
df=df.drop([col for col in df.columns if not col in columns_to_retain], axis=1)

#Drop the rows with na or missing values
df=df.dropna(axis=0)


for column in df.columns:
  if df[column].dtype==np.number:
    continue
  df[column] = LabelEncoder().fit_transform(df[column])

print(df.head())

X = df.drop(['classification'],axis=1)
y = df['classification']


x_scaler=MinMaxScaler()
x_scaler.fit(X)
column_names = X.columns
X[column_names]=x_scaler.transform(X)


X_train, X_test, y_train, y_test = train_test_split(X , y, test_size=0.2, shuffle=True)


model=Sequential()
model.add(Dense(256, input_dim=len(X.columns),kernel_initializer=k.initializers.random_normal(seed=13), activation='relu') )
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

history=model.fit(X_train, y_train,epochs=1000,batch_size= X_train.shape[0])




plt.plot(history.history['accuracy'])
plt.plot(history.history['loss'])
plt.title('Model accuracy & loss')
plt.ylabel('Accuracy and Loss')
plt.xlabel('epoch')



print('shape of training data:', X_train.shape)
print('shape of test data:', X_test.shape)


print(X_test)


#Show the actual and predicted values
#here 1 represents not ckd and 0 represents ckd
pred=model.predict(X_test)
pred=["NotCkd" if y>=0.5 else "CKD" for y in pred]
pred
print('Original:{0}'.format(",".join(str(x)for x in y_test)))
print('Predicted:{0}'.format(",".join(str(x)for x in pred)))
